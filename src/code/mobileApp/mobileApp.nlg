/*
 * mobileApp.nlg
 * MobileApp PWA
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2021-2024 by Richard C. Zulch
 *
 */


/*
 * persistent
 *
 *     These globals store various client state.
 *
 */

mobilePersist = false;                                                       // persisted globals
mobileLanguage = false;                                                     // selected UI language


/*
 * persistGlobal
 *
 * Mark a global variable for persistence. All globals thus marked will be stored in localStorage and
 * reloaded the next time the app is stored. Globals must be marked each time the app runs or they
 * will not be stored again, which is designed to allow abandoned variables to disappear over time.
 *
 */

function persistGlobal(keep) {
    if !keep || !symbol(keep) || keep.namespace != nsrights() {
        debuglog("persistGlobal: ${keep} cannot be persisted")
        return
    }
    if !mobilePersist
        mobilePersist = {
            symbols: { }
        }
    mobilePersist.symbols[keep] = keep
    keep
};

function loadPersists(local persist, name, value) {
    try {
        persist = JSONparse(js.w.localStorage.getItem("mopersist-$NaanIDE_Configuration$"))
        for `(name, value) in persist.symbols
            assign(compress(name), value)
    } catch {
        if true { false }
    }
};

function storePersists(local persist, name, sym) {
    persist = new(mobilePersist)
    for `(name, sym) in persist.symbols
        persist.symbols[name] = sym.value
    try {
        js.w.localStorage.removeItem("mopersist-$NaanIDE_Configuration$")
        js.w.localStorage.setItem("mopersist-$NaanIDE_Configuration$", JSONstringify(persist))
    } catch {
        if true {
            debuglog("mobileApp storePersists failed", exception)
        }
    }
};


/*
 * MobileApp
 *
 *     The main application class.
 *
 * Note:
 *  mobile.baseurl is the page URL without any variables or hashes
 *  mobile.hostpath is the URL to which you append resource paths
 *
 */

lastVersion = false;

closure MobileApp(version, local mobile) {
    global(App, document, js, lastVersion, mobileLanguage, window, T,
        iiModal)
    mobile = new(object, this)
    mobile.uagent = new(window.bowser.parse(window.navigator.userAgent))    // see mobile.uagent.*
    mobile.listeners = { }
    mobile.hostpath = window.location.origin.concat(js.r("path").dirname(window.location.pathname))
    if mobile.hostpath.slice(-1) != "/"
        mobile.hostpath = mobile.hostpath.concat("/")                       // must end in "/"
    mobile.baseurl = window.location.href.split(RegExp("[?#]"))[0]          // URL without variables or hashes
    if window.location.protocol == "https:" {
        mobile.sworker = ServiceWorker("MobileApp-$NaanIDE_Configuration$", App.version)
        mobile.sworker.register(function(msg, arg) {
            debuglog("mobile.sworker.register: ${msg}")
            if msg == "available" {
                if mobile.initialized
                    mobile.checker.run(60)                                   // run the update checker soon
                else
                    appUpdateNow()                                          // update now
            }
        })
    }

    // i18nextStartup
    //
    // Start up the translation system. This uses the i18next library. Information available at:
    //      https://www.i18next.com                                         -- website
    //      https://github.com/i18next/i18next                              -- main library
    //      https://github.com/i18next/i18next-http-backend                 -- fetch language files
    // This defines the global function T() for i18next.t() and causes callers to wait until the
    // language file(s) have been loaded. The main uses of T() are:
    //      T(<static-text>)                    // returns a translation of <static-text>
    //      T(<static-text>, { var: value} )    // translation with substitution, where
    //          <static-text> has "{{var}}" inside where value should appear
    // For more T() options, like plurals, date and time formatting, etc. please see:
    //      https://www.i18next.com/translation-function/essentials
    // and subsequent pages at that location.
    //
    // To add new static-text strings, please add them to the locale file for each language:
    //      static/locales/en/translation.json
    //      static/locales/ru/translation.json
    //      (and more in the future)
    // The en file should get a line like:
    //      "my text has {{data}}": "my text has {{data}}"
    // The other languages should look like:
    //      "my text has {{data}}": "в моем тексте есть {{data}}"
    // but if you don't know one of the (future) languages, then leave the definition empty:
    //      "my text has {{data}}": ""
    //
    closure i18nextStartup(local pending, watchdog) {
        pending = new(nonce)
        //
        // initialize i18next and then signal pending
        //
        future(function (local cachebuster, error, inst) {
            if !mobileLanguage
                mobileLanguage = "$DefLanguage$"
            cachebuster = requireQuery()                                    // ?naanver=<guid>
            cachebuster = cachebuster.substring(cachebuster.indexOf("=")+1)
            `(error, inst) = await(window.i18next.use(window.i18nextHttpBackend).init({
                lng: mobileLanguage
                fallbackLng: false
                keySeparator: false
                nsSeparator: false
                returnEmptyString: false
                // debug: true
                backend: {
                    loadPath: '${mobile.hostpath}locales/{{lng}}/{{ns}}.json'
                    queryStringParams: {
                        naanver: cachebuster
                    }
                }
            }))
            if error
                debuglog("i18next startup failed", error)
            watchdog.cancel()
            pending.signal()
        }, 0)
        //
        // watchdog timer to prevent hang on library failure
        //
        watchdog = future(function() {
            debuglog("i18nextStartup timeout")
            pending.signal()
        }, 10000)
        //
        // T starts out pausing its callers, and eventually becomes the translator directly
        //
        T = function translate args {
            pending.wait()
            T = window.i18next.t
            if T
                xapply(T, T, args)
            else {
                T = identity
                apply(identity, args)
            }
        }
    }()
    
    // setLanguage
    //
    // Set the user interface language, and then reload the page almost immediately. Valid choices
    // are currently "en", "ru", and false (to use the default language.)
    //
    mobile.setLanguage = function setLanguage(lang) {
        mobileLanguage = lang
        storePersists()
    	future(function() { window.location.reload() }, 1)
    }

    // notify
    //
    // Notify interested recipients on a topic.
    //
    mobile.notify = closure notify args {
        function (msgid, local trav) {
            for trav in mobile.listeners[msgid]
                apply(trav, args)
        } (pop(args))
    }
    
    // registerForNotify
    //
    // Register a procedure to receive notifications on a topic.
    //
    mobile.registerForNotify = function registerForNotify(msgid, whom) {
        if mobile.listeners[msgid].indexOf(whom) >= 0
            return
        if !mobile.listeners[msgid]
            mobile.listeners[msgid] = []
        mobile.listeners[msgid].push(whom)
    }
    
    // unregisterNotify
    //
    // Unregister a procedure from notifications.
    //
    mobile.unregisterNotify = function unregisterNotify(whom, local msgid, whoms) {
        if array(whom)
            whom.forEach(function(item) { unregisterNotify(item) })
        else
            for `(msgid, whoms) in mobile.listeners
                whoms = whoms.filter(function(listener) { whom !== listener })
    }

    // =====================================================================//
    //  Application initialization                                          //
    // =====================================================================//

    mobile.frames = FramesContainer(mobile)
    mobile.pageSettings = PageSettings(mobile.frames)
    mobile.pageStart = PageStart(mobile.frames)
    mobile.globalDiv = document.getElementById('mobileGlobalMenu')
    mobile.gmenu = OffcanvasVisifier(mobile.globalDiv)
    mobile.gmenuSettings = mobile.globalDiv.getElementsByClassName("ts_settings").0
    mobile.globalAlertDiv = document.getElementById("globalAlertArea")
    mobile.updateBut = document.getElementById('update_mobile_but')
    mobile.updateBut.textContent = T("Update MobileApp")
    mobile.contentDiv = document.getElementById('run_swipe_pointer')
    mobile.headerMenu = document.getElementById("headerMenu")

    //
    // click handlers
    //

    mobile.headerMenu.addEventListener("click", function(event) {
        event.preventDefault()
        openGlobalMenu()
        false
    })

    //
    // global menu drawer
    //
    mobile.gmenuSettings.addEventListener("click", function() {
        mobile.gmenu.hide()
        mobile.pageSettings.activate()
    })

    // openGlobalMenu
    //
    // Open the global menu offcanvas div.
    //
    mobile.openGlobalMenu = closure openGlobalMenu() {
        if true                                                             // don't use menu with only one choice
            mobile.pageSettings.activate()
        else {
            mobile.gmenuSettings.textContent = T("Settings")
            mobile.gmenu.show()
        }
    }
    
    // notifyOrientation
    //
    // Notify everyone of our orientation, at start and on change.
    //
    function notifyOrientation(local orient) {
        if window.innerWidth <= window.innerHeight
            orient = `vertical
        else
            orient = `horizontal
        if mobile.orient != orient {
            mobile.orient = orient
            mobile.notify(`orientationChange, orient)
            debuglog("orientation is now ${orient}")
        }
    }
    
    // docResized
    //
    // Note that the document has resized, and ensure that we fill it. This would be a good thing
    // for browsers to do automatically, but regrettably that is not the case in November 2022.
    //
    function docResized() {
        if mobile.resizeDelayer
            mobile.resizeDelayer.run(10)                                     // delay longer
        else
            mobile.resizeDelayer = future(function(local doc) {
                window.scroll(0,0)
                mobile.resizeDelayer = false
                doc = document.documentElement
                doc.style.setProperty('--doc-height', tostring(window.innerHeight).concat("px"))
                mobile.frames.activeFrame().frameResize()
                notifyOrientation()
            }, 20)                                                          // run after delay
    }
    window.onresize = docResized.proc
    docResized()

    //
    // mobile.alert
    //
    // Display an alert with the specified text and options. If the text starts with "<" then
    // it is assumed to be intentional HTML and no processing is performed. Otherwise the text
    // is escaped so that no inadvertent interpretation is done. Options are:
    // {
    //      class:      bootstrap-5 alert class, such as "alert-danger"; default is "alert-primary"
    //      timeout:    nnnn millisecond timeout, after which alert closes automatically
    //      noclose:    true to disable the close button
    // }
    //
    
    mobile.alert = closure alert(text, options, local alert, alertTempDiv, ocDiv, bsAlert, earlier) {
        if !mobile.alerts
            mobile.alerts = []
        for alert in mobile.alerts
            if alert.text == text && alert.options == options {
                if alert.delayer
                    alert.delayer.run(options.timeout)
                return (alert.control)                                      // don't show duplicate alert
            }
        alert = {
            text: text
            options: options
        }
        mobile.alerts.push(alert)
        alertTempDiv = document.getElementById("closableAlertTemplate")
        ocDiv = alertTempDiv.cloneNode(true)
        ocDiv.id = ""
        setElementClass(ocDiv, "d-none", false)
        alert.div = ocDiv
        if options.class
            ocDiv.classList.add(options.class)
        else
            ocDiv.classList.add("alert-primary")
        if text.charAt(0) != "<"
            text = escapeHTML(text)                                         // escape text if not intentionally HTML
        ocDiv.innerHTML = ocDiv.innerHTML.replace("{alert-text}", text)
        if options.noclose
            ocDiv.removeChild(ocDiv.getElementsByClassName("close").0)
        earlier = mobile.globalAlertDiv.children[0]
        if earlier
            mobile.globalAlertDiv.insertBefore(ocDiv, earlier)               // put newer on top
        else
            mobile.globalAlertDiv.append(ocDiv)
        bsAlert = xnew(window.bootstrap.Alert, ocDiv)
        if options.timeout > 0
            alert.delayer = future(close, options.timeout)                  // closes automatically

        ocDiv.addEventListener("closed.bs.alert", function() {              // remove from list on close
            bsAlert = false
            mobile.alerts = mobile.alerts.filter(function(alert) {
                alert.div !== ocDiv
            })
        })

        //
        // caller access functions
        //

        function close() {                                                  // throw's exception in BS v5.1.3
            bsAlert.close()                                                 // but no harm done
        }

        function onClose(proc) {
            ocDiv.addEventListener("close.bs.alert", proc)
        }

        function onClosed(proc) {
            ocDiv.addEventListener("closed.bs.alert", proc)
        }

        alert.control = {                                                   // dictionary for caller to use
            close: close,                                                   // close the alert
            onClose: onClose,                                               // call proc on closing, start of fade-out
            onClosed: onClosed                                              // call proc on closed, after invisible
        }
    }

    // goBackFrame
    //
    // The user wants to go back from the specified frame, but there is no history left. This makes
    // the decision about whether to provide a new frame for returning.
    //
    mobile.goBackFrame = function goBackFrame(curframe) {
        if curframe.divID != "courseRunPage" {
            mobile.pageStart.makeFrame()                                    // returns new frame
        }
    }

    // =====================================================================//
    //  Application startup                                                 //
    // =====================================================================//

    // enableUpdateCheck
    //
    // Enable addUpdateCheck
    //
    mobile.enableUpdateCheck = function enableUpdateCheck() {
        mobile.hideUpdatebutton = false
        mobile.checker.run(1)                                                // in case update occurred while button hidden
    }
     
    // disableUpdateCheck
    //
    // Disable addUpdateCheck
    //
    mobile.disableUpdateCheck = function disableUpdateCheck() {
        mobile.hideUpdatebutton = true
    }
     
    // appUpdateCheck
    //
    // Get the latest app version from the server, with a random query to defeat cacheing, and check
    // if our app needs to be updated. The result of this function is true iff we need to update.
    //
    mobile.appUpdateCheck = function appUpdateCheck(local url, error, data, result, version, age) {
        url = mobile.hostpath.concat(EncodeQuery("code/env_hosted.js?", {
            rnv: UUID()
        }))
        `(error, data) = mobile.HttpsApiRequest(url, { })
        if error
            return (false)                                                  // errors tell us nothing
        result = RegExp('App.version = "([^"]+)"[\\s\\S]+App.cache = "([^"]+)"').exec(data)
        if !result
            return (false)                                                  // couldn't find version string
        age = VersionCheck(App.version, result.1)                           // result.1 is version; result.2 is cache
        debuglog("appUpdateCheck:", App.version, result.1, age)
        !age || age < 0                                                     // <0 means we are older than server
    }
    
    // appUpdateNow
    //
    // Reload the app, with a new sevice worker if available.
    //
    mobile.appUpdateNow = function appUpdateNow() {
        debuglog("appUpdateNow")
        if !mobile.sworker                                                  // no service worker for a http connections
            window.location.reload()
        else
            mobile.sworker.register(function(msg, arg) {                    // re-register
                debuglog("appUpdateNow.register: ${msg}")
                if msg == "registered"
                    mobile.sworker.reload()                                 // first: switch workers
                else if msg == "available"
        	        window.location.reload()                                // second: reload the page
            })
        mobile.sworker.update()
    }

    // startup
    //
    printline("query: ", Dialect.print(new(js.q)))
    mobile.browserMod = require("frameworks/browser/https_request.nlg")
    mobile.HttpsApiRequest = mobile.browserMod.HttpsApiRequest
    mobile.checker = future(function appUpdater() {
        if !mobile.hideUpdatebutton && appUpdateCheck() {
            setElementClass(mobile.updateBut, "d-none", false)
            mobile.updateBut.addEventListener("click", function() {
                setElementClass(mobile.updateBut, "d-none", true)
                appUpdateNow()
            })
        }
        mobile.checker.run(3600000)                                          // 1 hour - 3,600,000 msec
    }, 3600000)
    mobile.pageStart.activate()

    // finis
    mobile
};


/*
 * decodeJWT
 *
 */

closure decodeJWT(token) {
    new(token.split(".").map(function(part,index) {
        if index < 2
            JSONparse(DecodeBase64url(part))
        else
            DecodeBase64url(part)
    }))
};


/*
 * mobileInit
 *
 *     Load MobileApp into the browser, whether for the first time or after reload.
 *
 */

function mobileInit(local manifest) {
    manifest = `(mobilePersist, mobileLanguage, persistGlobal, loadPersists, storePersists, MobileApp, mobileInit)

    Naan.module.build(module.id, "mobileApp", function(modobj, compobj) {
        compobj.manifest = manifest
        module.exports.MobileApp = MobileApp
        T = function() { debuglog("T() called before translation ready") }
        if "$NaanIDE_Configuration$" == "dev"
            asyncArray([                                                    // load prerequisites in parallel
                "frameworks/common/common.nlg",
                "frameworks/browser/https_request.nlg",
                "frames.nlg",
                "page_settings.nlg",
                "page_start.nlg",
                "swipe.nlg",
                "utils.nlg",
                "utilsUI.nlg"
            ], 10, closure(item) {
                require(item, { parent: modobj.namespace })
            }).wait()
        require("frameworks/common/common.nlg").LiveImport()

        // mobileReload
        // Reload the module
        function mobileReload() {
            window = js.w
            document = window.document
        }()
        module.reload = mobileReload
        loadPersists()
        persistGlobal(`mobileLanguage)
        
        // mobileResave
        // Save the module
        function mobileResave() {
            storePersists()
        }
        module.resave = mobileResave
    })
} ();
